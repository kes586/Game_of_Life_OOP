#include "Figure_Game.h"
void Figure_Game::New_Game_Init() {
	int i;
	bool** field1 = new bool* [this->Xlen];
	
	if (field1 == NULL)
		exit(0);
	for (i = 0; i < this->Xlen; i++)
	{
		field1[i] = new bool[this->Ylen];
		memset(field1[i], 0, this->Ylen);
		if (field1[i] == NULL)
			exit(0);
	}
	field1[1][11 + 5] = 1; field1[2][11 + 5] = 1; field1[2][11 + 6] = 1; field1[1][11 + 6] = 1;
	field1[12][11 + 5] = 1; field1[12][11 + 6] = 1; field1[12][11 + 7] = 1; field1[13][11 + 8] = 1;
	field1[14][11 + 9] = 1; field1[15][11 + 8] = 1; field1[16][11 + 7] = 1; field1[17][11 + 7] = 1;
	field1[16][11 + 6] = 1; field1[17][11 + 6] = 1; field1[16][11 + 5] = 1; field1[17][11 + 5] = 1;
	field1[15][11 + 4] = 1; field1[14][11 + 3] = 1; field1[13][11 + 4] = 1; field1[26][11 + 1] = 1;
	field1[23][11 + 2] = 1; field1[24][11 + 2] = 1; field1[25][11 + 2] = 1; field1[26][11 + 2] = 1;
	field1[22][11 + 3] = 1; field1[23][11 + 3] = 1; field1[24][11 + 3] = 1; field1[25][11 + 3] = 1;
	field1[22][11 + 4] = 1; field1[25][11 + 4] = 1; field1[22][11 + 5] = 1; field1[23][11 + 5] = 1;
	field1[24][11 + 5] = 1; field1[25][11 + 5] = 1; field1[23][11 + 6] = 1; field1[24][11 + 6] = 1;
	field1[25][11 + 6] = 1; field1[26][11 + 6] = 1; field1[26][11 + 7] = 1; field1[31][11 + 5] = 1;
	field1[31][11 + 6] = 1; field1[35][11 + 3] = 1; field1[36][11 + 3] = 1; field1[35][11 + 4] = 1;
	field1[36][11 + 4] = 1; field1[57][11 + 38] = 1; field1[62][11 + 38] = 1; field1[55][11 + 39] = 1;
	field1[56][11 + 39] = 1; field1[58][11 + 39] = 1; field1[59][11 + 39] = 1; field1[60][11 + 39] = 1;
	field1[61][11 + 39] = 1; field1[63][11 + 39] = 1; field1[64][11 + 39] = 1; field1[57][11 + 40] = 1; field1[62][11 + 40] = 1;// ружьё


	field1[67][12] = 1; field1[68][12] = 1; field1[69][12] = 1; field1[67][13] = 1; field1[68][13] = 1;
	field1[69][13] = 1; field1[67][14] = 1; field1[68][14] = 1; field1[69][14] = 1; field1[70][15] = 1;
	field1[71][15] = 1; field1[72][15] = 1; field1[70][16] = 1; field1[71][16] = 1; field1[72][16] = 1;
	field1[70][17] = 1; field1[71][17] = 1; field1[72][17] = 1;//восьмёрка

	field1[87][17] = 1; field1[88][17] = 1; field1[89][17] = 1; field1[87][16] = 1; field1[88][16] = 1;
	field1[89][16] = 1; field1[87][15] = 1; field1[88][15] = 1; field1[89][15] = 1; field1[90][14] = 1;
	field1[91][14] = 1; field1[92][14] = 1; field1[90][13] = 1; field1[91][13] = 1; field1[92][13] = 1;
	field1[90][12] = 1; field1[91][12] = 1; field1[92][12] = 1;//обратная восьмёрка


	field1[110][12] = 1; field1[111][12] = 1; field1[112][12] = 1; field1[116][12] = 1; field1[117][12] = 1;
	field1[118][12] = 1; field1[108][14] = 1; field1[108][15] = 1; field1[108][16] = 1; field1[113][14] = 1;
	field1[113][15] = 1; field1[113][16] = 1; field1[110][17] = 1; field1[111][17] = 1; field1[112][17] = 1;
	field1[115][14] = 1; field1[115][15] = 1; field1[115][16] = 1; field1[120][14] = 1; field1[120][15] = 1;
	field1[120][16] = 1; field1[116][17] = 1; field1[117][17] = 1; field1[118][17] = 1; field1[110][19] = 1;
	field1[111][19] = 1; field1[112][19] = 1; field1[116][19] = 1; field1[117][19] = 1; field1[118][19] = 1;
	field1[108][20] = 1; field1[108][21] = 1; field1[108][22] = 1; field1[113][20] = 1; field1[113][21] = 1;
	field1[113][22] = 1; field1[115][20] = 1; field1[115][21] = 1; field1[115][22] = 1; field1[110][24] = 1;
	field1[111][24] = 1; field1[112][24] = 1; field1[116][24] = 1; field1[117][24] = 1; field1[118][24] = 1;
	field1[120][20] = 1; field1[120][21] = 1; field1[120][22] = 1;//пульсар

	field1[140][12] = 1; field1[141][12] = 1; field1[142][12] = 1; field1[143][12] = 1;
	field1[144][12] = 1; field1[145][12] = 1; field1[146][12] = 1; field1[147][12] = 1;
	field1[140][14] = 1; field1[141][14] = 1; field1[142][14] = 1; field1[143][14] = 1;
	field1[144][14] = 1; field1[145][14] = 1; field1[146][14] = 1; field1[147][14] = 1;

	field1[140][13] = 1; field1[147][13] = 1;
	for (int i = 142; i <= 145; i++)
		field1[i][13] = 1;
	field1[155][12] = 1; field1[156][11] = 1; field1[155][13] = 1; field1[156][13] = 1; field1[157][13] = 1;
	for (int i = 165; i <= 172; i++) {
		field1[i][8] = 1;
		field1[i][10] = 1;
	}
	field1[165][9] = 1; field1[172][9] = 1;
	for (int i = 167; i <= 170; i++)
		field1[i][9] = 1;//реле


	field1[188][12] = 1; field1[189][12] = 1; field1[190][12] = 1;
	for (int i = 183; i <= 195; i++)
		if (i != 185 && i != 193)
			field1[i][13] = 1;
	field1[183][14] = 1; field1[187][14] = 1; field1[189][14] = 1; field1[191][14] = 1; field1[195][14] = 1;
	for (int i = 184; i <= 194; i++)
		if (i != 188 && i != 189 && i != 190)
			field1[i][15] = 1;
	field1[186][16] = 1; field1[192][16] = 1; field1[186][17] = 1; field1[192][17] = 1;
	field1[180][18] = 1; field1[181][18] = 1; field1[185][18] = 1; field1[186][18] = 1; field1[192][18] = 1;
	field1[193][18] = 1; field1[197][18] = 1; field1[198][18] = 1; field1[180][19] = 1; field1[198][19] = 1;
	for (int i = 183; i <= 195; i++)
		if (i != 188 && i != 190)
			field1[i][19] = 1;
	field1[181][20] = 1; field1[182][20] = 1; field1[183][20] = 1;
	field1[188][20] = 1; field1[189][20] = 1; field1[190][20] = 1;
	field1[195][20] = 1; field1[196][20] = 1; field1[197][20] = 1;
	field1[183][22] = 1; field1[184][22] = 1; field1[183][23] = 1;
	field1[184][25] = 1; field1[185][25] = 1; field1[185][24] = 1;
	field1[194][22] = 1; field1[195][22] = 1; field1[195][23] = 1;
	field1[193][24] = 1; field1[193][25] = 1; field1[194][25] = 1;// фонтан


	for (int i = 212; i <= 215; i++) {
		field1[i][12] = 1; field1[i][19] = 1;
	}
	for (int i = 210; i <= 217; i++) {
		if (i != 213 && i != 214) {
			field1[i][14] = 1; field1[i][17] = 1;
		}
	}
	field1[212][13] = 1; field1[215][13] = 1; field1[210][15] = 1; field1[217][15] = 1;
	field1[210][16] = 1; field1[217][16] = 1; field1[212][18] = 1; field1[215][18] = 1; //кросс


	field1[234][12] = 1; field1[235][12] = 1; field1[236][12] = 1;
	field1[232][14] = 1; field1[234][14] = 1; field1[236][14] = 1; field1[238][14] = 1;
	field1[230][16] = 1; field1[232][16] = 1; field1[238][16] = 1; field1[240][16] = 1;
	field1[230][17] = 1; field1[240][17] = 1;
	field1[230][18] = 1; field1[232][18] = 1; field1[238][18] = 1; field1[240][18] = 1;
	field1[232][20] = 1; field1[234][20] = 1; field1[236][20] = 1; field1[238][20] = 1;
	field1[234][22] = 1; field1[235][22] = 1; field1[236][22] = 1;//звезда


	for (int i = 10; i <= 15; i++) {
		field1[i][160 - 60] = 1; field1[i][160 - 61] = 1;
	}
	for (int i = 13; i <= 18; i++) {
		field1[i][160 - 67] = 1; field1[i][160 - 68] = 1;
	}
	for (int j = 160 - 63; j >= 160 - 68; j--) {
		field1[10][j] = 1; field1[11][j] = 1;
	}
	for (int j = 160 - 60; j >= 160 - 65; j--) {
		field1[17][j] = 1; field1[18][j] = 1;
	}//галактика Кока


	for (int i = 41; i <= 48; i++) {
		field1[i][160 - 50] = 1; field1[i][160 - 52] = 1;
	}
	for (int i = 41; i <= 48; i++)
		if (i != 42 && i != 47)
			field1[i][160 - 51] = 1;
	for (int i = 40; i <= 47; i++) {
		field1[i][160 - 65] = 1; field1[i][160 - 67] = 1;
	}
	for (int i = 40; i <= 47; i++)
		if (i != 41 && i != 46)
			field1[i][160 - 66] = 1;
	field1[45][160 - 57] = 1; field1[43][160 - 58] = 1; field1[46][160 - 58] = 1;
	field1[43][160 - 59] = 1; field1[44][160 - 60] = 1; field1[46][160 - 59] = 1;//мухомор


	field1[71][160 - 57] = 1; field1[71][160 - 59] = 1; field1[70][160 - 58] = 1; field1[72][160 - 58] = 1;
	field1[71][160 - 65] = 1; field1[71][160 - 67] = 1; field1[70][160 - 66] = 1; field1[72][160 - 66] = 1;
	field1[86][160 - 57] = 1; field1[86][160 - 59] = 1; field1[85][160 - 58] = 1; field1[87][160 - 58] = 1;
	field1[86][160 - 65] = 1; field1[86][160 - 67] = 1; field1[85][160 - 66] = 1; field1[87][160 - 66] = 1;
	field1[79][160 - 58] = 1; field1[80][160 - 58] = 1; field1[81][160 - 58] = 1; field1[79][160 - 59] = 1;
	field1[79][160 - 60] = 1; field1[80][160 - 60] = 1; field1[81][160 - 60] = 1; field1[81][160 - 59] = 1;
	field1[79][160 - 64] = 1; field1[80][160 - 64] = 1; field1[81][160 - 64] = 1; field1[79][160 - 65] = 1;
	field1[79][160 - 66] = 1; field1[80][160 - 66] = 1; field1[81][160 - 66] = 1; field1[81][160 - 65] = 1;//эврика


	field1[111][160 - 45] = 1; field1[112][160 - 45] = 1;
	field1[106][160 - 46] = 1; field1[107][160 - 46] = 1; field1[109][160 - 46] = 1; field1[114][160 - 46] = 1; field1[116][160 - 46] = 1; field1[117][160 - 46] = 1;
	field1[106][160 - 47] = 1; field1[117][160 - 47] = 1;
	field1[107][160 - 48] = 1; field1[108][160 - 48] = 1; field1[115][160 - 48] = 1; field1[116][160 - 48] = 1;
	for (int i = 104; i <= 119; i++)
		if (i != 107 && i != 108 && i != 115 && i != 116)
			field1[i][160 - 49] = 1;
	field1[104][160 - 50] = 1; field1[107][160 - 50] = 1; field1[116][160 - 50] = 1; field1[119][160 - 50] = 1;
	field1[101][160 - 51] = 1; field1[102][160 - 51] = 1; field1[104][160 - 51] = 1; field1[106][160 - 51] = 1;
	field1[117][160 - 51] = 1; field1[119][160 - 51] = 1; field1[121][160 - 51] = 1; field1[122][160 - 51] = 1;
	field1[101][160 - 52] = 1; field1[103][160 - 52] = 1; field1[105][160 - 52] = 1; field1[118][160 - 52] = 1; field1[120][160 - 52] = 1; field1[122][160 - 52] = 1;
	field1[103][160 - 53] = 1; field1[120][160 - 53] = 1;
	field1[101][160 - 54] = 1; field1[104][160 - 54] = 1; field1[119][160 - 54] = 1; field1[122][160 - 54] = 1;
	field1[104][160 - 55] = 1; field1[112][160 - 55] = 1; field1[113][160 - 55] = 1; field1[114][160 - 55] = 1; field1[119][160 - 55] = 1;
	field1[100][160 - 56] = 1; field1[104][160 - 56] = 1; field1[112][160 - 56] = 1; field1[114][160 - 56] = 1; field1[119][160 - 56] = 1; field1[123][160 - 56] = 1;
	field1[100][160 - 57] = 1; field1[104][160 - 57] = 1; field1[112][160 - 57] = 1; field1[114][160 - 57] = 1; field1[119][160 - 57] = 1; field1[123][160 - 57] = 1;
	field1[104][160 - 58] = 1; field1[119][160 - 58] = 1;
	field1[101][160 - 59] = 1; field1[104][160 - 59] = 1; field1[119][160 - 59] = 1; field1[122][160 - 59] = 1;
	field1[103][160 - 60] = 1; field1[120][160 - 60] = 1;
	field1[101][160 - 61] = 1; field1[103][160 - 61] = 1; field1[105][160 - 61] = 1; field1[118][160 - 61] = 1; field1[120][160 - 61] = 1; field1[122][160 - 61] = 1;
	field1[101][160 - 62] = 1; field1[102][160 - 62] = 1; field1[104][160 - 62] = 1; field1[106][160 - 62] = 1;
	field1[117][160 - 62] = 1; field1[119][160 - 62] = 1; field1[121][160 - 62] = 1; field1[122][160 - 62] = 1;
	field1[104][160 - 63] = 1; field1[107][160 - 63] = 1; field1[116][160 - 63] = 1; field1[119][160 - 63] = 1;
	for (int i = 104; i <= 119; i++)
		if (i != 107 && i != 108 && i != 115 && i != 116)
			field1[i][160 - 64] = 1;
	field1[107][160 - 65] = 1; field1[108][160 - 65] = 1; field1[115][160 - 65] = 1; field1[116][160 - 65] = 1;
	field1[106][160 - 66] = 1; field1[117][160 - 66] = 1;
	field1[106][160 - 67] = 1; field1[107][160 - 67] = 1; field1[109][160 - 67] = 1; field1[114][160 - 67] = 1; field1[116][160 - 67] = 1; field1[117][160 - 67] = 1;
	field1[111][160 - 68] = 1; field1[112][160 - 68] = 1;//pi portraitor


	field1[142][160 - 45] = 1; field1[147][160 - 45] = 1; field1[142][160 - 47] = 1; field1[147][160 - 47] = 1;
	for (int i = 140; i <= 149; i++)
		if (i != 142 && i != 147)
			field1[i][160 - 46] = 1;
	field1[142][160 - 55] = 1; field1[147][160 - 55] = 1; field1[142][160 - 57] = 1; field1[147][160 - 57] = 1;
	for (int i = 140; i <= 149; i++)
		if (i != 142 && i != 147)
			field1[i][160 - 56] = 1;
	field1[142][160 - 65] = 1; field1[147][160 - 65] = 1; field1[142][160 - 67] = 1; field1[147][160 - 67] = 1;
	for (int i = 140; i <= 149; i++)
		if (i != 142 && i != 147)
			field1[i][160 - 66] = 1;//пентадекатлоны


	field1[177][160 - 62] = 1; field1[182][160 - 62] = 1; field1[177][160 - 64] = 1; field1[182][160 - 64] = 1;
	for (int i = 175; i <= 184; i++)
		if (i != 177 && i != 182)
			field1[i][160 - 63] = 1;
	field1[170][160 - 58] = 1; field1[171][160 - 58] = 1; field1[188][160 - 58] = 1; field1[189][160 - 58] = 1;
	field1[171][160 - 59] = 1; field1[188][160 - 59] = 1;
	field1[171][160 - 60] = 1; field1[173][160 - 60] = 1; field1[186][160 - 60] = 1; field1[188][160 - 60] = 1;
	field1[172][160 - 61] = 1; field1[173][160 - 61] = 1; field1[186][160 - 61] = 1; field1[187][160 - 61] = 1;
	field1[172][160 - 65] = 1; field1[173][160 - 65] = 1; field1[186][160 - 65] = 1; field1[187][160 - 65] = 1;
	field1[171][160 - 66] = 1; field1[173][160 - 66] = 1; field1[186][160 - 66] = 1; field1[188][160 - 66] = 1;
	field1[171][160 - 67] = 1; field1[188][160 - 67] = 1;
	field1[170][160 - 68] = 1; field1[171][160 - 68] = 1; field1[188][160 - 68] = 1; field1[189][160 - 68] = 1;//шейкер


	field1[204][160 - 58] = 1; field1[213][160 - 58] = 1;
	field1[202][160 - 59] = 1; field1[203][160 - 59] = 1; field1[204][160 - 59] = 1; field1[213][160 - 59] = 1; field1[214][160 - 59] = 1; field1[215][160 - 59] = 1;
	field1[201][160 - 60] = 1; field1[216][160 - 60] = 1;
	field1[201][160 - 61] = 1; field1[204][160 - 61] = 1; field1[205][160 - 61] = 1; field1[206][160 - 61] = 1;
	field1[211][160 - 61] = 1; field1[212][160 - 61] = 1; field1[213][160 - 61] = 1; field1[216][160 - 61] = 1;
	field1[200][160 - 62] = 1; field1[201][160 - 62] = 1; field1[203][160 - 62] = 1; field1[207][160 - 62] = 1;
	field1[210][160 - 62] = 1; field1[214][160 - 62] = 1; field1[216][160 - 62] = 1; field1[217][160 - 62] = 1;
	field1[203][160 - 63] = 1; field1[207][160 - 63] = 1; field1[208][160 - 63] = 1;
	field1[209][160 - 63] = 1; field1[210][160 - 63] = 1; field1[214][160 - 63] = 1;
	field1[203][160 - 64] = 1; field1[207][160 - 64] = 1; field1[210][160 - 64] = 1; field1[214][160 - 64] = 1;
	field1[204][160 - 65] = 1; field1[205][160 - 65] = 1; field1[206][160 - 65] = 1;
	field1[211][160 - 65] = 1; field1[212][160 - 65] = 1; field1[213][160 - 65] = 1;
	field1[204][160 - 67] = 1; field1[205][160 - 67] = 1; field1[207][160 - 67] = 1;
	field1[210][160 - 67] = 1; field1[212][160 - 67] = 1; field1[213][160 - 67] = 1;
	field1[204][160 - 68] = 1; field1[206][160 - 68] = 1; field1[207][160 - 68] = 1;
	field1[210][160 - 68] = 1; field1[211][160 - 68] = 1; field1[213][160 - 68] = 1;//очки


	for (int i = 231; i <= 239; i++)
		if (i != 235)
			field1[i][160 - 63] = 1;
	for (int j = 160 - 58; j >= 160 - 68; j--)
		if (j != 160 - 63)
			field1[235][j] = 1;
	field1[233][160 - 59] = 1; field1[237][160 - 59] = 1;
	field1[231][160 - 60] = 1; field1[233][160 - 60] = 1; field1[237][160 - 60] = 1; field1[239][160 - 60] = 1;
	field1[232][160 - 61] = 1; field1[233][160 - 61] = 1; field1[237][160 - 61] = 1; field1[238][160 - 61] = 1;
	field1[230][160 - 62] = 1; field1[240][160 - 62] = 1;
	field1[230][160 - 64] = 1; field1[240][160 - 64] = 1;
	field1[232][160 - 65] = 1; field1[233][160 - 65] = 1; field1[237][160 - 65] = 1; field1[238][160 - 65] = 1;
	field1[231][160 - 66] = 1; field1[233][160 - 66] = 1; field1[237][160 - 66] = 1; field1[239][160 - 66] = 1;
	field1[233][160 - 67] = 1; field1[237][160 - 67] = 1;//колесо

	this->main_array = new bool[this->Xlen * this->Ylen * sizeof(bool)];
	if (this->main_array == NULL)
		exit(0);
	for (int i = 0; i < this->Xlen; i++)
		for (int j = 0; j < this->Ylen; j++) {
			this->main_array[i * this->Ylen + j] = field1[i][j];
		}
	delete[]field1;
	this->begin = 1;
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(-1, this->Xwindow, this->Ywindow, -1);
}
Figure_Game::Figure_Game(Settings settings) {
	Xwindow = settings.Xwindow;
	Ywindow = settings.Ywindow;
	Xlen = settings.Xlen;
	Ylen = settings.Ylen;
	begin = settings.begin;
	pause = settings.pause;
	speed = settings.speed;
	pixel_raz = settings.pixel_raz;
};